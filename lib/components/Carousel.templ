package components

import (
	"fmt"
	"github.com/will-lol/personalWebsiteAwesome/services/eid"
	"log/slog"
)

type Src struct {
	Src            string
	IntrinsicWidth int
}

type CarouselPhoto struct {
	Desktop *Src
	Mobile  *Src
	Src     *string
	Alt     string
}

func NewCarouselPhoto(desktop *Src, mobile *Src, src *string, alt string) CarouselPhoto {
	return CarouselPhoto{
		Desktop: desktop,
		Mobile:  mobile,
		Src:     src,
		Alt:     alt,
	}
}

script animate(id string) {
	window.addEventListener("load", () => {
		const el = document.getElementById(id);
		let translateWidth = el.scrollWidth / 2;
		const velocity = 0.050;

		const anim = el.animate([
			{
				transform: "translateX(0px)",
			},
			{
				transform: `translateX(-${translateWidth}px)`,
			},
		], {
			duration: translateWidth / velocity,
			iterations: Infinity,
			fill: "both"
		});

		// Only in Firefox does IntersectionObserver work in the expected way with animating transforms. On other browsers the transform must be committed (or there be a user interaction) for the intersection to be observed. To circumvent this we just commit the transform every 500ms by pausing and playing the animation. Super janky but it works.
		if (navigator.userAgent.search("Firefox") < 0) {
			setInterval(() => {
				anim.pause();
				anim.play();
			}, 500)
		}
	})
}

type FullWidthCarouselModel struct {
	Photos     []CarouselPhoto
	IDs        []string
	CarouselID string
	RootID     string
}

func NewFullWidthCarouselModel(photos []CarouselPhoto, ctx context.Context) (m FullWidthCarouselModel) {
	m.IDs = make([]string, len(photos), len(photos))
	m.CarouselID = eid.GetNextHandled(ctx, slog.Default())
	m.RootID = eid.GetNextHandled(ctx, slog.Default())
	m.Photos = photos

	for i := range m.IDs {
		m.IDs[i] = eid.GetNextHandled(ctx, slog.Default())
	}

	return m
}

templ FullWidthCarousel(m FullWidthCarouselModel) {
	<div id={ m.RootID } class="overflow-hidden relative">
		<div class="z-10 absolute inset-0 bg-vignette"></div>
		<div id={ m.CarouselID } class="max-w-none h-[80svh] flex flex-nowrap">
			@images(m.Photos, m.IDs)
			@images(m.Photos, m.IDs)
		</div>
		@animate(m.CarouselID)
		@captions(m.Photos, m.IDs, m.RootID)
	</div>
}

templ captions(photos []CarouselPhoto, ids []string, rootId string) {
	<div class="absolute bottom-0 font-semibold px-3 py-2 grid grid-rows-1 grid-cols-1 text-white z-20">
		for i, caption := range photos {
			<div class="first:h-full first:opacity-100 h-0 opacity-0" id={ ids[i] + "_caption" }>
				{ caption.Alt }
			</div>
		}
		@animateCaptions(ids, rootId)
	</div>
}

script animateCaptions(ids []string, rootId string) {
	window.addEventListener("load", () => {
		const images = [];
		const captions = [];

		for (const id of ids) {
			images.push(document.querySelectorAll(`[id="${id}"]`));
			captions.push(document.getElementById(`${id}_caption`));
		}
		
		const captionParent = captions[0].parentElement;
		function prioritise(caption) {
			const current = captionParent.firstElementChild;
			const currentFirst = current.getBoundingClientRect();

			if (current.id == caption.id) {
				return;
			}
			
			captionParent.prepend(caption);
			const currentLast = current.getBoundingClientRect();
			const deltaX = currentFirst.left - currentLast.left;
			const deltaY = currentFirst.top - currentLast.top;

			current.animate([{
				transformOrigin: 'top left',
				transform: `translate(${deltaX}px, ${deltaY}px)`,
				opacity: 1,
			}, {
				opacity: 0,
			}, {
				transformOrigin: 'top left',
				transform: `translate(${deltaX}px, ${deltaY-40}px)`,
			}], {
				duration: 1000,
				easing: 'ease-in-out',
			})

			currentAnim = caption.animate([{
				transform: `translateY(40px)`,
				opacity: 0,
			}, {
				transform: `translateY(0px)`,
				opacity: 1,
			}], {
				duration: 1000,
				easing: 'ease-in-out',
			})
		}

		const observer = new IntersectionObserver((entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting && entry.intersectionRatio < 0.5) {
					prioritise(document.getElementById(entry.target.id + "_caption"));
				}
			})
		}, {
			root: document.getElementById(rootId),
			rootMargin: "0% -40% 0% 0%",
			threshold: 0,
		})

		for (const image of images) {
			image.forEach((el) => {
				observer.observe(el);
			})
		}
	})
}

templ images(photos []CarouselPhoto, ids []string) {
	for i, photo := range photos {
		if photo.Src != nil || (photo.Desktop == nil || photo.Mobile == nil) {
			@noisyImg(templ.Attributes{
						"alt": templ.EscapeString(photo.Alt),
						"src": templ.EscapeString(*photo.Src),
						"id": templ.EscapeString(ids[i]),
					})
		} else {
			@noisyImg(templ.Attributes{
						"alt": templ.EscapeString(photo.Alt),
						"id": templ.EscapeString(ids[i]),
						"srcset": fmt.Sprintf("%s %dw, %s %dw", photo.Mobile.Src, photo.Mobile.IntrinsicWidth, photo.Desktop.Src, photo.Desktop.IntrinsicWidth),
						"sizes": fmt.Sprintf("(max-width: 640px) %dpx, %dpx", photo.Mobile.IntrinsicWidth, photo.Desktop.IntrinsicWidth),
					})
		}
	}
}

templ noisyImg(attrs templ.Attributes) {
	<div class="relative h-full shrink-0 grow-0">
		<div class="absolute z-10 opacity-10 pointer-events-none bg-repeat inset-0 bg-noise"></div>
		<img class="h-full" { attrs... }/>
	</div>
}
